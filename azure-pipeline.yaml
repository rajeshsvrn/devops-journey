# azure-pipelines-gitops.yml
# Based on your existing GitOps structure shown in the images

trigger:
  branches:
    include: [develop, qa, main]

variables:
  azureServiceConnection: "azure-federated-identity"
  containerRegistry: "devopsjourney.azurecr.io"

  # Your existing GitOps repository (from the ArgoCD config)
  gitOpsRepoUrl: "https://github.com/rajeshsvrn/devops-journey.git"
  gitOpsRepoBranch: "HEAD" # As shown in ArgoCD config

  # Environment-specific variables
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    targetEnvironment: "development"
    namespace: "develop"
    imageTag: "dev-$(Build.BuildNumber)"
    argocdApp: "devops-app-develop" # From your argocd-apps

  ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/qa') }}:
    targetEnvironment: "qa"
    namespace: "qa"
    imageTag: "qa-$(Build.BuildNumber)"
    argocdApp: "devops-app-qa" # From your qa-application.yaml

  ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    targetEnvironment: "production"
    namespace: "production"
    imageTag: "prod-$(Build.BuildNumber)"
    argocdApp: "devops-app-production"

stages:
  - stage: Build_and_Push_Images
    displayName: "Build & Push Container Images"
    jobs:
      - job: BuildImages
        displayName: "Build Application Images"
        pool:
          name: "devopsjourney"
        steps:
          - task: AzureCLI@2
            displayName: "Build and Push Backend Image"
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "üîê Azure AD federated authentication successful!"
                echo "üèóÔ∏è Building backend image for $(targetEnvironment)"
                echo "üì¶ Image tag: $(imageTag)"

                # Login to Azure Container Registry
                az acr login --name devopsjourney

                # Build and push backend image
                echo "üî® Building backend image..."
                docker build -t $(containerRegistry)/devops-backend:$(imageTag) backend/
                docker push $(containerRegistry)/devops-backend:$(imageTag)

                # Also tag as environment-latest for easy reference
                docker tag $(containerRegistry)/devops-backend:$(imageTag) $(containerRegistry)/devops-backend:$(targetEnvironment)-latest
                docker push $(containerRegistry)/devops-backend:$(targetEnvironment)-latest

                echo "‚úÖ Backend image built and pushed!"
                echo "Image: $(containerRegistry)/devops-backend:$(imageTag)"

          - task: AzureCLI@2
            displayName: "Build and Push Frontend Image"
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |

                echo "üîé  Current user      : $(whoami)"
                echo "üîé  Effective UID/GID : $(id -u) / $(id -g)"


                echo "üî® Building frontend image..."

                # Build and push frontend image
                docker build -t $(containerRegistry)/devops-frontend:$(imageTag) frontend/
                docker push $(containerRegistry)/devops-frontend:$(imageTag)

                # Also tag as environment-latest
                docker tag $(containerRegistry)/devops-frontend:$(imageTag) $(containerRegistry)/devops-frontend:$(targetEnvironment)-latest
                docker push $(containerRegistry)/devops-frontend:$(targetEnvironment)-latest

                echo "‚úÖ Frontend image built and pushed!"
                echo "Image: $(containerRegistry)/devops-frontend:$(imageTag)"

  - stage: Update_Helm_Values
    displayName: "Update Helm Values for GitOps"
    dependsOn: Build_and_Push_Images
    jobs:
      - job: UpdateHelmValues
        displayName: "Update Helm Chart Values"
        pool:
          name: "devopsjourney"
        steps:
          - task: AzureCLI@2
            displayName: "Update Helm Values in GitOps Repo"
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "üìù Updating Helm values for $(targetEnvironment)"
                echo "üéØ Target ArgoCD app: $(argocdApp)"
                echo "üè∑Ô∏è Image tag: $(imageTag)"

                # Configure git
                git config --global user.email "azure-devops@devopsjourney.com"
                git config --global user.name "Azure DevOps Pipeline"

                # Clone the repository (same repo where your code is)
                echo "üì• Cloning repository..."
                git clone $(gitOpsRepoUrl) gitops-working
                cd gitops-working

                # Update the appropriate Helm values file based on environment
                if [ "$(targetEnvironment)" = "development" ]; then
                  VALUES_FILE="devops-gitops/helm-charts/devops-app/values.yaml"
                elif [ "$(targetEnvironment)" = "qa" ]; then
                  VALUES_FILE="devops-gitops/helm-charts/devops-app/qa-values.yaml"
                else
                  VALUES_FILE="devops-gitops/helm-charts/devops-app/prod-values.yaml"
                fi

                echo "üìù Updating values file: $VALUES_FILE"

                # Update backend image tag
                sed -i "s|tag: \"v[0-9]*\"|tag: \"$(imageTag)\"|g" $VALUES_FILE
                sed -i "s|tag: \"dev-[0-9]*\"|tag: \"$(imageTag)\"|g" $VALUES_FILE
                sed -i "s|tag: \"qa-[0-9]*\"|tag: \"$(imageTag)\"|g" $VALUES_FILE
                sed -i "s|tag: \"prod-[0-9]*\"|tag: \"$(imageTag)\"|g" $VALUES_FILE

                # More specific updates for backend and frontend sections
                # Update backend image tag
                sed -i "/backend:/,/frontend:/ { /image:/,/pullPolicy:/ s|tag: \".*\"|tag: \"$(imageTag)\"|g }" $VALUES_FILE

                # Update frontend image tag  
                sed -i "/frontend:/,/mongodb:/ { /image:/,/pullPolicy:/ s|tag: \".*\"|tag: \"$(imageTag)\"|g }" $VALUES_FILE

                echo "‚úÖ Values file updated. Current backend/frontend sections:"
                grep -A 10 "backend:" $VALUES_FILE | head -15
                grep -A 10 "frontend:" $VALUES_FILE | head -15

                # Check if there are actually changes to commit
                if git diff --quiet; then
                  echo "‚ÑπÔ∏è No changes detected in values file"
                else
                  echo "üì§ Committing changes..."
                  git add $VALUES_FILE
                  
                  git commit -m "üöÄ Deploy $(targetEnvironment): Update images to $(imageTag)

                  Environment: $(targetEnvironment)
                  Namespace: $(namespace)
                  Backend Image: $(containerRegistry)/devops-backend:$(imageTag)
                  Frontend Image: $(containerRegistry)/devops-frontend:$(imageTag)
                  
                  Pipeline: $(Build.BuildNumber)
                  Branch: $(Build.SourceBranch)
                  Triggered by: $(Build.RequestedFor)
                  
                  ArgoCD App: $(argocdApp) will auto-sync this change"
                  
                  git push origin HEAD
                  echo "‚úÖ Changes pushed to repository!"
                  echo "üöÄ ArgoCD will detect changes and deploy automatically"
                fi

  - stage: Trigger_ArgoCD_Sync
    displayName: "Trigger ArgoCD Sync (Optional)"
    dependsOn: Update_Helm_Values
    jobs:
      - job: TriggerSync
        displayName: "Notify ArgoCD"
        pool:
          name: "devopsjourney"
        steps:
          - task: AzureCLI@2
            displayName: "Notify ArgoCD and Wait for Sync"
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "üîî ArgoCD Sync Notification"
                echo "üì± App: $(argocdApp)"
                echo "üéØ Environment: $(targetEnvironment)"
                echo "üì¶ Images deployed:"
                echo "  Backend: $(containerRegistry)/devops-backend:$(imageTag)"
                echo "  Frontend: $(containerRegistry)/devops-frontend:$(imageTag)"

                # Optional: Call ArgoCD API to trigger immediate sync
                # (Requires ArgoCD API access and token)
                # argocd app sync $(argocdApp) --auth-token $ARGOCD_TOKEN

                echo "‚è∞ ArgoCD will sync within 3 minutes (default sync interval)"
                echo "üîç You can monitor the deployment at:"

                if [ "$(targetEnvironment)" = "development" ]; then
                  echo "üåê Development: https://devraj.duckdns.org"
                elif [ "$(targetEnvironment)" = "qa" ]; then  
                  echo "üåê QA: https://qaraj.duckdns.org"
                elif [ "$(targetEnvironment)" = "production" ]; then
                  echo "üåê Production: https://prodraj.duckdns.org"
                fi

                echo ""
                echo "üéâ GitOps Deployment Completed Successfully!"
                echo "‚úÖ No Kubernetes API access required"
                echo "‚úÖ No kubectl commands needed"
                echo "‚úÖ ArgoCD handles all cluster operations"
                echo "‚úÖ Git is the single source of truth"
                echo "‚úÖ Full audit trail in Git history"
                echo ""
                echo "üìã Deployment Summary:"
                echo "  Environment: $(targetEnvironment)"
                echo "  Namespace: $(namespace)"  
                echo "  ArgoCD App: $(argocdApp)"
                echo "  Image Tag: $(imageTag)"
                echo "  Pipeline: $(Build.BuildNumber)"
