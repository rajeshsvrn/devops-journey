# Global configuration
global:
  namespace: develop
  imageRegistry: "devopsjourney.azurecr.io"
  imageTag: "latest" # Will be overridden by specific tags
  environment: develop

  # Image pull secrets for ACR
  imagePullSecrets:
    - name: acr-admin-creds

  # Standard labels
  labels:
    app.kubernetes.io/name: devops-app
    app.kubernetes.io/part-of: enterprise-platform
    app.kubernetes.io/managed-by: helm
    environment: develop

# Backend configuration (from your existing backend deployment)
backend:
  enabled: true
  name: backend

  image:
    repository: "devops-backend"
    tag: "v8" # Your current version
    pullPolicy: IfNotPresent

  replicaCount: 2

  service:
    type: ClusterIP
    port: 5000
    targetPort: 5000
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "5000"
      prometheus.io/path: "/metrics"

  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"

  # Configuration from your ConfigMap
  config:
    nodeEnv: "development"
    port: "5000"
    dbName: "devops-app"
    logLevel: "info"

  # Jaeger tracing configuration
  jaeger:
    enabled: true
    serviceName: "backend-service"
    agentHost: "jaeger-agent.monitoring.svc.cluster.local"
    agentPort: "6831"
    samplerType: "const"
    samplerParam: "1"

  # Secrets configuration
  secrets:
    enabled: true
    jwtSecretKey: "JWT_SECRET"
    mongoUriKey: "MONGODB_URI"

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault

  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL

  # Service Account
  serviceAccount:
    name: backend-sa

# Frontend configuration (from your frontend.yaml)
frontend:
  enabled: true
  name: frontend

  image:
    repository: "devops-frontend"
    tag: "v10" # Your current version
    pullPolicy: IfNotPresent

  replicaCount: 2

  service:
    type: ClusterIP
    port: 80
    targetPort: 80
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "80"
      prometheus.io/path: "/metrics"

  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

  # Configuration
  config:
    apiUrl: "http://backend:5000/api"

  # Jaeger tracing configuration
  jaeger:
    enabled: true
    serviceName: "frontend-service"
    agentHost: "jaeger-agent.monitoring"
    agentPort: "6831"
    samplerType: "const"
    samplerParam: "1"

  # Custom nginx configuration
  customNginxConfig: true

  # Health checks
  healthCheck:
    livenessPath: "/"
    readinessPath: "/"
    initialDelaySeconds: 30
    readinessInitialDelay: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  # Security context (currently disabled in your manifest)
  securityContext:
    enabled: false # Set to true when ready
    runAsNonRoot: true
    runAsUser: 101
    runAsGroup: 101
    fsGroup: 101

  # Service Account
  serviceAccount:
    name: frontend-sa

# MongoDB configuration (from your mongodb.yaml)
mongodb:
  enabled: true
  name: mongodb

  image:
    repository: "mongo"
    tag: "6.0"
    pullPolicy: IfNotPresent

  replicaCount: 1

  service:
    type: ClusterIP
    port: 27017
    targetPort: 27017
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "27017"
      prometheus.io/path: "/metrics"

  # Configuration
  config:
    database: "devops-app"

  # Persistence configuration
  persistence:
    enabled: false # Currently using emptyDir like your dev setup
    # When enabled, will use PVC
    storageClass: "manual"
    size: "5Gi"
    reclaimPolicy: "Retain"
    hostPath: "/mnt/data/mongodb"

  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  # Security context (from your current setup)
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    seccompProfile:
      type: RuntimeDefault

  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false # MongoDB needs to write to /tmp
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
    capabilities:
      drop:
        - ALL

  # Service Account
  serviceAccount:
    name: mongodb-sa

# Ingress configuration (from your existing ingress)
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  hosts:
    - host: "devraj.duckdns.org"
      paths:
        - path: "/api(/|$)(.*)"
          pathType: ImplementationSpecific
          backend: backend
        - path: "/(.*)"
          pathType: ImplementationSpecific
          backend: frontend

  tls:
    - hosts:
        - "devraj.duckdns.org"
      secretName: "devops-tls"

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: falses"
